class Solution {
    public int height(TreeNode root) {
        if(root==null)return 0;
        if(root.left==null && root.right==null)return 0;
        return Math.max(height(root.left),height(root.right)) + 1;
    }
    public boolean isBalanced(TreeNode root) {
        if(root==null)return true;
        int lh = height(root.left);
        int rh = height(root.right);
        if(root.left!=null)lh++;
        if(root.right!=null)rh++;
        int diff = lh-rh;
        if(diff<0) diff = -diff;
        if(diff>1) {
            return false;
        }
      return (isBalanced(root.left) && isBalanced(root.right));
    }
}




class Solution {
   public static int height(TreeNode root) {
    if(root==null) return 0;
    return Math.max(height(root.left),height(root.right))+1;
   }

    public boolean isBalanced(TreeNode root) {
        if(root==null)return true;
        if(Math.abs( height(root.left)-height(root.right) ) > 1) return false;
        return isBalanced(root.left) && isBalanced(root.right);
    }
}
