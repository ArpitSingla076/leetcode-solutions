class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int arr[] = new int[m+n];
        int left = 0;
        int right = 0;
        int index = 0;
        while(left < m && right < n) {
            if(nums1[left] <= nums2[right]) {
                arr[index] = nums1[left];
                left++;
                index++;
            }
            else {
                arr[index] = nums2[right];
                right++;
                index++;

            }
        }

        while(left < m) {
            arr[index] = nums1[left];
            left++;
            index++;
        }

        while(right < n) {
            arr[index] = nums2[right];
            right++;
            index++;
        }

        // for (int i = 0; i < n + m; i++) {
        //     if (i < m) {
        //         nums1[i] = arr[i];
        //     } else {
        //         nums2[i - m] = arr[i];
        //     }
        // }

        for (int i = 0; i < m + n; i++) {
            nums1[i] = arr[i]; // Copy only to nums1 as nums2 should not be modified
        }
    }
}


// +++ Optimal Approach +++

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) { // SC O(1) TC(m+n)
        int idx = m + n - 1;
        int i = m - 1;
        int j = n - 1;

        while(i>=0 && j>=0) {
            if(nums1[i] >= nums2[j]) {
                nums1[idx] = nums1[i];
                idx--;
                i--;
            }
            else{
                nums1[idx] = nums2[j];
                idx--;
                j--;
            }
        }
        while(j>=0){
            nums1[idx] = nums2[j];
                idx--;
                j--;
        }
    }
}
