--- This is Iterative sol ---

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root!=null) q.add(root);
        while(q.size()>0) {
            List<Integer>small = new ArrayList<>();
            int level = q.size();
            for(int i=0;i<level;i++) {
                TreeNode temp = q.peek();
                if(temp.left!=null)q.add(temp.left);
                if(temp.right!=null)q.add(temp.right);
                small.add(temp.val);
                q.remove();
            }
            result.add(small);
        }
        return result; 
    }
}


--- This is recursive sol ---
class Solution {
    public void helper(TreeNode root,List<List<Integer>>res,int level) {
        if(root==null)return;
        if(res.size()==level) res.add(new ArrayList<>());
        res.get(level).add(root.val);
        helper(root.left,res,level+1);
        helper(root.right,res,level+1);
    }

    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        helper(root,res,0);
        return res;
    }
}
